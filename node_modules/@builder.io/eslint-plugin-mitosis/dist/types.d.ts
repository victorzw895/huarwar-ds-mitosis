import * as ESTree from 'estree';
interface NodeWithParent extends ESTree.BaseNode {
    parent: NodeWithParent;
    type: NodeType;
}
interface JSXExpressionContainer extends NodeWithParent {
    type: 'JSXExpressionContainer';
    expression: NodeExt;
}
interface JSXAttribute extends NodeWithParent {
    type: 'JSXAttribute';
    name: {
        name: {};
    };
    value: JSXExpressionContainer;
}
interface JSXOpeningElement extends NodeWithParent {
    type: 'JSXOpeningElement';
    attributes: JSXAttribute[];
}
declare module 'eslint' {
    namespace Rule {
        interface NodeListener {
            JSXOpeningElement?(node: JSXOpeningElement): void;
            JSXAttribute?(node: JSXAttribute): void;
            JSXExpressionContainer?(node: JSXExpressionContainer): void;
        }
    }
}
declare type NodeJSX = JSXExpressionContainer | JSXAttribute | JSXOpeningElement;
declare type NodeExt = ESTree.Node | NodeJSX;
declare type NodeType = NodeExt['type'];
export {};
