"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var eslint_1 = require("eslint");
var prefer_show_over_ternary_operator_1 = require("../prefer-show-over-ternary-operator");
var opts = {
    filename: 'component.lite.tsx',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    }
};
var ruleTester = new eslint_1.RuleTester({
    parser: require.resolve('@typescript-eslint/parser')
});
ruleTester.run('prefer-show-over-ternary-operator', prefer_show_over_ternary_operator_1["default"], {
    valid: [
        __assign(__assign({}, opts), { code: "\n      export default function MyComponent(props) {\n        return (\n          <div>\n            <Show when={foo}>\n              <bar />\n            </Show>\n            <Show when={!foo}>\n              <baz />\n            </Show>\n          </div>\n        );\n      }\n    " }),
        __assign(__assign({}, opts), { code: "export default function MyComponent(props) {\n      const state = useState({ \n        getName() {\n          props.a ? 'a' : 'b'\n        } \n      })\n      return <div />;\n    }" }),
        __assign(__assign({}, opts), { code: "\n      export default function MyComponent(props) {\n        return <div> <input value={props.a ? 'a' : 'b'} /> </div>;\n      }" }),
        __assign(__assign({}, opts), { code: "\n      export default function MyComponent(props) {\n        return <div>{foo ? <bar /> : <baz />}</div>;\n      }\n    ", filename: 'file.jsx' }),
    ],
    invalid: [
        __assign(__assign({}, opts), { code: "\n      export default function MyComponent(props) {\n        return <div>{foo ? <bar /> : <baz />}</div>;\n      }\n    ", errors: [
                'Ternary expression support is minimal. Please use the Mitosis `<Show>` component instead.',
            ] }),
    ]
});
