"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var eslint_1 = require("eslint");
var css_no_vars_1 = require("../css-no-vars");
var opts = {
    filename: 'component.lite.tsx',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    }
};
var ruleTester = new eslint_1.RuleTester();
ruleTester.run('css-no-vars', css_no_vars_1["default"], {
    valid: [
        __assign(__assign({}, opts), { code: '<button/>' }),
        __assign(__assign({}, opts), { code: '<button css={{ color: "red" }} />' }),
        __assign(__assign({}, opts), { code: '<button css={{ fontSize: 12 }} />' }),
        __assign(__assign({}, opts), { code: '<button onClick={ null }/>', filename: 'file.jsx' }),
    ],
    invalid: [
        __assign(__assign({}, opts), { code: '<button css={{ color: red }} />', errors: ["Css properties can't be a variable"] }),
        __assign(__assign({}, opts), { code: '<button css={{ fontSize: 10, color: red }} />', errors: ["Css properties can't be a variable"] }),
        __assign(__assign({}, opts), { code: '<button css={"sting"} />', errors: ['Css attribute value must be an object'] }),
        __assign(__assign({}, opts), { code: '<button css={1} />', errors: ['Css attribute value must be an object'] }),
        __assign(__assign({}, opts), { code: '<button css={true} />', errors: ['Css attribute value must be an object'] }),
        __assign(__assign({}, opts), { code: '<button css={{color: a ? "red" : "green" }} />', errors: ["Css properties can't be a ternary expression"] }),
        __assign(__assign({}, opts), { code: '<button css={{backgroundColor: state.red }} />', errors: ["Css properties can't be a member expression"] }),
        __assign(__assign({}, opts), { code: '<button css={{backgroundColor: state.red, color: red }} />', errors: ["Css properties can't be a member expression", "Css properties can't be a variable"] }),
    ]
});
