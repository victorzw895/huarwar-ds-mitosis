"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var eslint_1 = require("eslint");
var no_var_name_same_as_prop_name_1 = require("../no-var-name-same-as-prop-name");
var opts = {
    filename: 'component.lite.tsx',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    }
};
var ruleTester = new eslint_1.RuleTester();
ruleTester.run('no-var-name-same-as-prop-name', no_var_name_same_as_prop_name_1["default"], {
    valid: [
        __assign(__assign({}, opts), { code: "\n      import { useStore } from \"@builder.io/mitosis\";\n\n      export default function MyComponent(props) {\n        const state = useStore({\n          getName() {\n            const name = props.name_ || 'hello'\n            return name + ' world'\n          }\n        });\n      \n        return (\n          <div>\n            {state.getName()}\n          </div>\n        );\n      }\n      " }),
        __assign(__assign({}, opts), { code: "\n      import { useStore } from \"@builder.io/mitosis\";\n\n      export default function MyComponent(props) {\n        const state = useStore({\n          getName() {\n            const name = props.name || 'hello'\n            return name + ' world'\n          }\n        });\n      \n        return (\n          <div>\n            {state.getName()}\n          </div>\n        );\n      }\n      ", filename: 'file.jsx' }),
    ],
    invalid: [
        __assign(__assign({}, opts), { code: "\n      import { useStore } from \"@builder.io/mitosis\";\n\n      export default function MyComponent(props) {\n        const state = useStore({\n          getName() {\n            const name = props.name\n            return name + ' world'\n          }\n        });\n      \n        return (\n          <div>\n            {state.getName()}\n          </div>\n        );\n      }\n      ", errors: ['Variable name should not be same as prop name'] }),
        __assign(__assign({}, opts), { code: "\n      import { useStore } from \"@builder.io/mitosis\";\n\n      export default function MyComponent(props) {\n        const state = useStore({\n          getName() {\n            const name = props.name || 'hello'\n            return name + ' world'\n          }\n        });\n      \n        return (\n          <div>\n            {state.getName()}\n          </div>\n        );\n      }\n      ", errors: ['Variable name should not be same as prop name'] }),
        __assign(__assign({}, opts), { code: "\n      import { useStore } from '@builder.io/mitosis';\n\n      export default function MyComponent(props) {\n        const state = useStore({\n          foo: 'bar',\n        });\n\n\n        function myFunction() {\n          const foo = props.foo;\n        }\n      \n        return <div />;\n      }\n      ", errors: ['Variable name should not be same as prop name'] }),
    ]
});
