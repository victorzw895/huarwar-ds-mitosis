"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var eslint_1 = require("eslint");
var jsx_callback_arrow_function_1 = require("../jsx-callback-arrow-function");
var opts = {
    filename: 'component.lite.tsx',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    }
};
var ruleTester = new eslint_1.RuleTester();
ruleTester.run('jsx-callback-arrow-function', jsx_callback_arrow_function_1["default"], {
    valid: [
        __assign(__assign(__assign({}, opts), { code: '<button/>' }), opts),
        __assign(__assign(__assign({}, opts), { code: '<button type="button"/>' }), opts),
        __assign(__assign({}, opts), { code: '<button onClick={ event => doSomething(event) }/>' }),
        __assign(__assign({}, opts), { code: '<button onClick={ event => doSomething() }/>' }),
        __assign(__assign({}, opts), { code: '<button onClick={ event => {} }/>' }),
        __assign(__assign(__assign({}, opts), { code: '<button onClick={ () => doSomething() }/>' }), opts),
        __assign(__assign({}, opts), { code: '<button onsomething={ null }/>' }),
        __assign(__assign({}, opts), { code: '<button onClick={ null }/>', filename: 'file.jsx' }),
    ],
    invalid: [
        __assign(__assign({}, opts), { code: '<button onClick={ function(event) {} }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ null }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ "string" }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ 1 }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ true }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ {} }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onClick={ [] }/>', output: '<button onClick={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onBlur={ [] }/>', output: '<button onBlur={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
        __assign(__assign({}, opts), { code: '<button onChange={ [] }/>', output: '<button onChange={ (event)=>{} }/>', errors: ['Callback value must be an arrow function expression'] }),
    ]
});
