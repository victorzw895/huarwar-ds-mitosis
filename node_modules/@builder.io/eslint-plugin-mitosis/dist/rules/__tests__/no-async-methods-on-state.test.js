"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var eslint_1 = require("eslint");
var no_async_methods_on_state_1 = require("../no-async-methods-on-state");
var opts = {
    filename: 'component.lite.tsx',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    }
};
var ruleTester = new eslint_1.RuleTester();
ruleTester.run('no-async-methods-on-state', no_async_methods_on_state_1["default"], {
    valid: [
        __assign(__assign({}, opts), { code: "\n      import { useStore } from '@builder.io/mitosis';\n      export default function MyComponent() {\n        const state = useStore({\n          doSomethingAsync(event) {\n            void (async function() {\n              const response = await fetch(); /* ... */\n            })();\n          },\n        });\n      }\n      " }),
        __assign(__assign({}, opts), { code: "\n      import { useStore } from '@builder.io/mitosis';\n      export default function MyComponent() {\n        const state = useStore({\n          async doSomethingAsync(event) {\n            const response = await fetch(); /* ... */\n          },\n        });\n        return <div />\n      }\n      ", filename: 'file.jsx' }),
    ],
    invalid: [
        __assign(__assign({}, opts), { code: "\n      import { useStore } from '@builder.io/mitosis';\n\n      export default function MyComponent() {\n        const state = useStore({\n          async doSomethingAsync(event) {\n      \n            const response = await fetch(); /* ... */\n          },\n        });\n        \n        return <div />\n      }\n      ", errors: ['async methods can\'t be defined on "state"'] }),
    ]
});
